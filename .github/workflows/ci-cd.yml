name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'master'
        type: choice
        options:
          - master
          - develop
      service:
        description: 'Service to build and deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api-service
          - worker-service
          - frontend-service
      force_build:
        description: 'Force build even without changes'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip tests (for hotfixes)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api-service: ${{ steps.changes.outputs.api-service || steps.manual.outputs.api-service }}
      worker-service: ${{ steps.changes.outputs.worker-service || steps.manual.outputs.worker-service }}
      frontend-service: ${{ steps.changes.outputs.frontend-service || steps.manual.outputs.frontend-service }}
      any-service: ${{ steps.changes.outputs.any-service || steps.manual.outputs.any-service }}
      is-manual: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
        fetch-depth: 2

    - name: Check for changes (automatic)
      if: github.event_name != 'workflow_dispatch'
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          api-service:
            - 'api-service/**'
          worker-service:
            - 'worker-service/**'
          frontend-service:
            - 'frontend-service/**'
          any-service:
            - 'api-service/**'
            - 'worker-service/**'
            - 'frontend-service/**'

    - name: Set manual dispatch flags
      if: github.event_name == 'workflow_dispatch'
      id: manual
      run: |
        SERVICE="${{ github.event.inputs.service }}"
        FORCE_BUILD="${{ github.event.inputs.force_build }}"
        
        if [ "$SERVICE" = "all" ] || [ "$FORCE_BUILD" = "true" ]; then
          echo "api-service=true" >> $GITHUB_OUTPUT
          echo "worker-service=true" >> $GITHUB_OUTPUT
          echo "frontend-service=true" >> $GITHUB_OUTPUT
          echo "any-service=true" >> $GITHUB_OUTPUT
        elif [ "$SERVICE" = "api-service" ]; then
          echo "api-service=true" >> $GITHUB_OUTPUT
          echo "worker-service=false" >> $GITHUB_OUTPUT
          echo "frontend-service=false" >> $GITHUB_OUTPUT
          echo "any-service=true" >> $GITHUB_OUTPUT
        elif [ "$SERVICE" = "worker-service" ]; then
          echo "api-service=false" >> $GITHUB_OUTPUT
          echo "worker-service=true" >> $GITHUB_OUTPUT
          echo "frontend-service=false" >> $GITHUB_OUTPUT
          echo "any-service=true" >> $GITHUB_OUTPUT
        elif [ "$SERVICE" = "frontend-service" ]; then
          echo "api-service=false" >> $GITHUB_OUTPUT
          echo "worker-service=false" >> $GITHUB_OUTPUT
          echo "frontend-service=true" >> $GITHUB_OUTPUT
          echo "any-service=true" >> $GITHUB_OUTPUT
        fi

    - name: Display deployment plan
      run: |
        echo "Deployment Plan:"
        echo "Trigger: ${{ github.event_name }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Branch: ${{ github.event.inputs.branch }}"
          echo "Service: ${{ github.event.inputs.service }}"
          echo "Force Build: ${{ github.event.inputs.force_build }}"
          echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"
        fi
        echo "API Service: ${{ steps.changes.outputs.api-service || steps.manual.outputs.api-service }}"
        echo "Worker Service: ${{ steps.changes.outputs.worker-service || steps.manual.outputs.worker-service }}"
        echo "Frontend Service: ${{ steps.changes.outputs.frontend-service || steps.manual.outputs.frontend-service }}"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-service == 'true' && github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup Node.js
      if: needs.detect-changes.outputs.api-service == 'true' || needs.detect-changes.outputs.frontend-service == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api-service/package-lock.json

    - name: Install API dependencies
      if: needs.detect-changes.outputs.api-service == 'true'
      run: |
        cd api-service
        npm ci

    - name: Run API tests
      if: needs.detect-changes.outputs.api-service == 'true'
      run: |
        cd api-service
        npm test

    - name: Setup Python
      if: needs.detect-changes.outputs.worker-service == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Worker dependencies
      if: needs.detect-changes.outputs.worker-service == 'true'
      run: |
        cd worker-service
        pip install -r requirements.txt

    - name: Run Worker tests
      if: needs.detect-changes.outputs.worker-service == 'true'
      run: |
        cd worker-service
        python -m pytest tests/ || echo "No tests found"

    - name: Install Frontend dependencies
      if: needs.detect-changes.outputs.frontend-service == 'true'
      run: |
        cd frontend-service
        npm ci

    - name: Run Frontend tests
      if: needs.detect-changes.outputs.frontend-service == 'true'
      run: |
        cd frontend-service
        npm test -- --coverage --watchAll=false || exit 0

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: |
      always() && 
      (needs.test.result == 'success' || needs.test.result == 'skipped') && 
      needs.detect-changes.outputs.any-service == 'true' && 
      (github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.branch || (github.ref == 'refs/heads/master' && 'master' || 'develop') }}
    
    strategy:
      matrix:
        service: [api-service, worker-service, frontend-service]
      fail-fast: false

    steps:
    - name: Check if service changed
      id: check-service
      run: |
        case "${{ matrix.service }}" in
          api-service)
            echo "changed=${{ needs.detect-changes.outputs.api-service }}" >> $GITHUB_OUTPUT
            ;;
          worker-service)
            echo "changed=${{ needs.detect-changes.outputs.worker-service }}" >> $GITHUB_OUTPUT
            ;;
          frontend-service)
            echo "changed=${{ needs.detect-changes.outputs.frontend-service }}" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Checkout code
      if: steps.check-service.outputs.changed == 'true'
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Create .env file for frontend
      if: matrix.service == 'frontend-service' && steps.check-service.outputs.changed == 'true'
      run: |
        cat > frontend-service/.env << 'EOF'
        REACT_APP_API_URL=${{ vars.API_URL }}
        EOF

    - name: Log in to Container Registry
      if: steps.check-service.outputs.changed == 'true'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      if: steps.check-service.outputs.changed == 'true'
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=${{ matrix.service }}
          org.opencontainers.image.description=Microservices ${{ matrix.service }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

    - name: Build and push Docker image
      if: steps.check-service.outputs.changed == 'true'
      uses: docker/build-push-action@v4
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Skip build message
      if: steps.check-service.outputs.changed != 'true'
      run: |
        echo "⏭️ No changes detected in ${{ matrix.service }}, skipping build"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.service }}" != "${{ matrix.service }}" ]; then
          echo "Service ${{ matrix.service }} not selected for manual deployment"
        fi

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: |
      always() && 
      needs.build.result == 'success' && 
      needs.detect-changes.outputs.any-service == 'true' &&
      (github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.branch || (github.ref == 'refs/heads/master' && 'master' || 'develop') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Update API service image tag
      if: needs.detect-changes.outputs.api-service == 'true'
      run: |
        sed -i "s|image: api-service:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-service:${{ github.sha }}|" k8s/api-service/api-deployment.yaml

    - name: Update Worker service image tag
      if: needs.detect-changes.outputs.worker-service == 'true'
      run: |
        sed -i "s|image: worker-service:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker-service:${{ github.sha }}|" k8s/worker-service/worker-deployment.yaml

    - name: Update Frontend service image tag
      if: needs.detect-changes.outputs.frontend-service == 'true'
      run: |
        sed -i "s|image: frontend-service:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend-service:${{ github.sha }}|" k8s/frontend-service/frontend-deployment.yaml

    - name: Deploy changed services to Kubernetes
      run: |
        kubectl apply -f k8s/

    - name: Wait for API service rollout
      if: needs.detect-changes.outputs.api-service == 'true'
      run: |
        kubectl rollout status deployment/api-service -n microservices --timeout=300s

    - name: Wait for Worker service rollout
      if: needs.detect-changes.outputs.worker-service == 'true'
      run: |
        kubectl rollout status deployment/worker-service -n microservices --timeout=300s

    - name: Wait for Frontend service rollout
      if: needs.detect-changes.outputs.frontend-service == 'true'
      run: |
        kubectl rollout status deployment/frontend-service -n microservices --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n microservices
        kubectl get services -n microservices

    - name: Show deployment summary
      run: |
        echo "🚀 Deployment Summary for ${{ github.event.inputs.branch || github.ref_name }}:"
        echo "Trigger: ${{ github.event_name }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Requested by: ${{ github.actor }}"
          echo "Selected service: ${{ github.event.inputs.service }}"
        fi
        echo "API Service: ${{ needs.detect-changes.outputs.api-service == 'true' && '✅ Updated' || '⏭️ No changes' }}"
        echo "Worker Service: ${{ needs.detect-changes.outputs.worker-service == 'true' && '✅ Updated' || '⏭️ No changes' }}"
        echo "Frontend Service: ${{ needs.detect-changes.outputs.frontend-service == 'true' && '✅ Updated' || '⏭️ No changes' }}"